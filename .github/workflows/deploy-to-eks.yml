name: Deploy to AWS EKS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggers

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: nexabuilder
  EKS_CLUSTER: nexabuilder-dev-eks-cluster
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER

    - name: Prepare deployment with secrets
      run: |
        # Substitute placeholders with actual secret values
        sed -i 's|__DATABASE_URL__|${{ secrets.DATABASE_URL }}|g' k8s/deployment.yaml
        sed -i 's|__DB_HOST__|${{ secrets.DB_HOST }}|g' k8s/deployment.yaml
        sed -i 's|__DB_PORT__|${{ secrets.DB_PORT }}|g' k8s/deployment.yaml
        sed -i 's|__DB_NAME__|${{ secrets.DB_NAME }}|g' k8s/deployment.yaml
        sed -i 's|__DB_USERNAME__|${{ secrets.DB_USERNAME }}|g' k8s/deployment.yaml
        sed -i 's|__DB_PASSWORD__|${{ secrets.DB_PASSWORD }}|g' k8s/deployment.yaml
        sed -i 's|__NEXTAUTH_SECRET__|${{ secrets.NEXTAUTH_SECRET }}|g' k8s/deployment.yaml
        sed -i 's|__NEXTAUTH_URL__|${{ secrets.NEXTAUTH_URL }}|g' k8s/deployment.yaml
        sed -i 's|__OPENAI_API_KEY__|${{ secrets.OPENAI_API_KEY }}|g' k8s/deployment.yaml
        
        # Update image in deployment file
        sed -i 's|image: 470880515336.dkr.ecr.us-east-1.amazonaws.com/nexabuilder:latest|image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}|g' k8s/deployment.yaml

    - name: Apply deployment manifests
      run: |
        kubectl apply -f k8s/deployment.yaml

    - name: Wait for rollout to complete
      run: |
        kubectl rollout status deployment/nexabuilder-app -n nexabuilder --timeout=600s

    - name: Verify deployment
      run: |
        kubectl get pods -n nexabuilder
        kubectl get services -n nexabuilder
        kubectl get ingress -n nexabuilder

    - name: Get application URL
      run: |
        echo "Application deployed successfully!"
        echo "Pods status:"
        kubectl get pods -n nexabuilder
        echo "Service status:"
        kubectl get services -n nexabuilder
        echo "Ingress status:"
        kubectl get ingress -n nexabuilder