name: Deploy NexaBuilder to AWS EKS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: nexabuilder
  EKS_CLUSTER: nexabuilder-dev-eks-cluster
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION --image-scanning-configuration scanOnPush=true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.simple
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.30.0'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER
        kubectl cluster-info

    - name: Prepare deployment manifests
      run: |
        # Create temporary deployment file with secrets
        cp k8s/deployment.yaml k8s/deployment-temp.yaml
        
        # Substitute placeholders with actual secret values
        sed -i "s|__DATABASE_URL__|${{ secrets.DATABASE_URL }}|g" k8s/deployment-temp.yaml
        sed -i "s|__DB_HOST__|${{ secrets.DB_HOST }}|g" k8s/deployment-temp.yaml
        sed -i "s|__DB_PORT__|${{ secrets.DB_PORT }}|g" k8s/deployment-temp.yaml
        sed -i "s|__DB_NAME__|${{ secrets.DB_NAME }}|g" k8s/deployment-temp.yaml
        sed -i "s|__DB_USERNAME__|${{ secrets.DB_USERNAME }}|g" k8s/deployment-temp.yaml
        sed -i "s|__DB_PASSWORD__|${{ secrets.DB_PASSWORD }}|g" k8s/deployment-temp.yaml
        sed -i "s|__NEXTAUTH_SECRET__|${{ secrets.NEXTAUTH_SECRET }}|g" k8s/deployment-temp.yaml
        sed -i "s|__NEXTAUTH_URL__|${{ secrets.NEXTAUTH_URL }}|g" k8s/deployment-temp.yaml
        sed -i "s|__OPENAI_API_KEY__|${{ secrets.OPENAI_API_KEY }}|g" k8s/deployment-temp.yaml
        
        # Update image to the newly built one
        sed -i "s|image: .*nexabuilder.*|image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}|g" k8s/deployment-temp.yaml
        
        echo "Final deployment manifest:"
        cat k8s/deployment-temp.yaml

    - name: Deploy to EKS
      run: |
        echo "Applying deployment to EKS cluster..."
        kubectl apply -f k8s/deployment-temp.yaml
        
        echo "Waiting for deployment to complete..."
        kubectl rollout status deployment/nexabuilder-app -n nexabuilder --timeout=10m

    - name: Verify deployment
      run: |
        echo "=== DEPLOYMENT STATUS ==="
        kubectl get deployments -n nexabuilder
        
        echo "=== POD STATUS ==="
        kubectl get pods -n nexabuilder -o wide
        
        echo "=== SERVICE STATUS ==="
        kubectl get services -n nexabuilder
        
        echo "=== INGRESS STATUS ==="
        kubectl get ingress -n nexabuilder
        
        echo "=== RECENT POD LOGS ==="
        kubectl logs -n nexabuilder deployment/nexabuilder-app --tail=20 || echo "No logs available yet"

    - name: Clean up
      run: |
        rm -f k8s/deployment-temp.yaml

    - name: Deployment Summary
      run: |
        echo "üéâ NexaBuilder deployment completed successfully!"
        echo "üìä Image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
        echo "üåç Cluster: ${{ env.EKS_CLUSTER }}"
        echo "üìã Check your ingress for the application URL"
