/**
 * Create command - Generate new projects from templates
 * Phase 1: Template-based generation
 * Phase 2: AI-powered generation
 */

import path from 'path'
import fs from 'fs-extra'
import chalk from 'chalk'
import ora from 'ora'
import inquirer from 'inquirer'
import { spawn } from 'cross-spawn'
import validateNpmPackageName from 'validate-npm-package-name'
import { TemplateEngine } from '../utils/template-engine'
import { FileUtils } from '../utils/file-utils'
import { Logger } from '../utils/logger'

interface CreateOptions {
  template?: string
  description?: string
  install?: boolean
  git?: boolean
  verbose?: boolean
}

const logger = new Logger('create')

export async function createProject(projectName: string, options: CreateOptions): Promise<void> {
  try {
    logger.info('Starting project creation', { projectName, options })

    // Validate project name
    await validateProjectName(projectName)

    // Determine how to create the project
    if (options.description) {
      // Phase 2: AI-powered generation
      await createProjectFromDescription(projectName, options.description, options)
    } else {
      // Phase 1: Template-based generation
      await createProjectFromTemplate(projectName, options)
    }

  } catch (error) {
    logger.error('Failed to create project', { error })
    console.error(chalk.red('‚ùå Failed to create project:'), error instanceof Error ? error.message : String(error))
    process.exit(1)
  }
}

async function validateProjectName(projectName: string): Promise<void> {
  const validation = validateNpmPackageName(projectName)
  
  if (!validation.validForNewPackages) {
    const issues = [
      ...(validation.errors || []),
      ...(validation.warnings || [])
    ]
    
    throw new Error(`Invalid project name "${projectName}":\n${issues.join('\n')}`)
  }

  // Check if directory already exists
  const targetDir = path.resolve(process.cwd(), projectName)
  if (await fs.pathExists(targetDir)) {
    const { overwrite } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'overwrite',
        message: `Directory "${projectName}" already exists. Overwrite?`,
        default: false
      }
    ])

    if (!overwrite) {
      throw new Error('Project creation cancelled')
    }

    await fs.remove(targetDir)
  }
}

async function createProjectFromTemplate(projectName: string, options: CreateOptions): Promise<void> {
  const spinner = ora('Creating project from template...').start()
  
  try {
    // Get available templates
    const templateEngine = new TemplateEngine()
    const availableTemplates = await templateEngine.getAvailableTemplates()

    let selectedTemplate = options.template
    
    // If no template specified, prompt user to select
    if (!selectedTemplate) {
      spinner.stop()
      const { template } = await inquirer.prompt([
        {
          type: 'list',
          name: 'template',
          message: 'Select a project template:',
          choices: availableTemplates.map(t => ({
            name: `${t.name} - ${t.description}`,
            value: t.id
          }))
        }
      ])
      selectedTemplate = template
      spinner.start('Creating project from template...')
    }

    // Validate template exists
    const template = availableTemplates.find(t => t.id === selectedTemplate)
    if (!template) {
      throw new Error(`Template "${selectedTemplate}" not found`)
    }

    spinner.text = `Creating project from ${template.name} template...`

    // Generate project from template
    const targetDir = path.resolve(process.cwd(), projectName)
    await templateEngine.generateProject(template.id, targetDir, {
      projectName,
      description: `A ${template.name} project created with NexaBuilder`,
      author: 'Generated by NexaBuilder CLI'
    })

    spinner.succeed(chalk.green('‚úÖ Project created successfully!'))

    // Install dependencies
    if (options.install !== false) {
      await installDependencies(targetDir)
    }

    // Initialize git repository
    if (options.git !== false) {
      await initializeGit(targetDir)
    }

    // Show success message and next steps
    showSuccessMessage(projectName, template.name)

  } catch (error) {
    spinner.fail(chalk.red('‚ùå Failed to create project from template'))
    throw error
  }
}

async function createProjectFromDescription(
  projectName: string, 
  description: string, 
  options: CreateOptions
): Promise<void> {
  const spinner = ora('Analyzing your project description with AI...').start()
  
  try {
    // Phase 2: This will use AI to analyze the description and generate the project
    // For now, we'll show a placeholder implementation
    
    spinner.text = 'ü§ñ AI is analyzing your requirements...'
    await new Promise(resolve => setTimeout(resolve, 2000)) // Simulate AI processing
    
    spinner.text = 'üî® Generating project structure...'
    await new Promise(resolve => setTimeout(resolve, 1500))
    
    spinner.text = 'üì¶ Creating components and APIs...'
    await new Promise(resolve => setTimeout(resolve, 2000))

    // For Phase 1, fall back to a smart template selection
    // Phase 2 will replace this with actual AI generation
    spinner.text = 'üéØ Selecting optimal template based on your description...'
    
    const templateEngine = new TemplateEngine()
    const smartTemplate = await templateEngine.selectTemplateForDescription(description)
    
    const targetDir = path.resolve(process.cwd(), projectName)
    await templateEngine.generateProject(smartTemplate.id, targetDir, {
      projectName,
      description,
      author: 'Generated by NexaBuilder AI'
    })

    spinner.succeed(chalk.green('üéâ AI-generated project created successfully!'))

    // Install dependencies
    if (options.install !== false) {
      await installDependencies(targetDir)
    }

    // Initialize git repository
    if (options.git !== false) {
      await initializeGit(targetDir)
    }

    // Show AI-specific success message
    showAISuccessMessage(projectName, description, smartTemplate.name)

  } catch (error) {
    spinner.fail(chalk.red('‚ùå AI project generation failed'))
    throw error
  }
}

async function installDependencies(projectDir: string): Promise<void> {
  const spinner = ora('Installing dependencies...').start()
  
  try {
    // Check if package.json exists
    const packageJsonPath = path.join(projectDir, 'package.json')
    if (!await fs.pathExists(packageJsonPath)) {
      spinner.info('No package.json found, skipping dependency installation')
      return
    }

    // Use npm install
    const result = spawn('npm', ['install'], {
      cwd: projectDir,
      stdio: 'pipe'
    })

    await new Promise<void>((resolve, reject) => {
      result.on('close', (code) => {
        if (code === 0) {
          spinner.succeed('üì¶ Dependencies installed')
          resolve()
        } else {
          reject(new Error(`npm install failed with code ${code}`))
        }
      })

      result.on('error', reject)
    })

  } catch (error) {
    spinner.fail('‚ùå Failed to install dependencies')
    console.log(chalk.yellow('‚ö†Ô∏è  You can install dependencies manually by running:'))
    console.log(chalk.cyan(`  cd ${path.basename(projectDir)} && npm install`))
  }
}

async function initializeGit(projectDir: string): Promise<void> {
  const spinner = ora('Initializing git repository...').start()
  
  try {
    // Initialize git repo
    const initResult = spawn('git', ['init'], { cwd: projectDir, stdio: 'pipe' })
    
    await new Promise<void>((resolve, reject) => {
      initResult.on('close', (code) => {
        if (code === 0) resolve()
        else reject(new Error(`git init failed with code ${code}`))
      })
      initResult.on('error', reject)
    })

    // Add all files
    const addResult = spawn('git', ['add', '.'], { cwd: projectDir, stdio: 'pipe' })
    
    await new Promise<void>((resolve, reject) => {
      addResult.on('close', (code) => {
        if (code === 0) resolve()
        else reject(new Error(`git add failed with code ${code}`))
      })
      addResult.on('error', reject)
    })

    // Initial commit
    const commitResult = spawn('git', ['commit', '-m', 'Initial commit from NexaBuilder CLI'], {
      cwd: projectDir,
      stdio: 'pipe'
    })
    
    await new Promise<void>((resolve, reject) => {
      commitResult.on('close', (code) => {
        if (code === 0) {
          spinner.succeed('üìù Git repository initialized')
          resolve()
        } else {
          reject(new Error(`git commit failed with code ${code}`))
        }
      })
      commitResult.on('error', reject)
    })

  } catch (error) {
    spinner.fail('‚ùå Failed to initialize git repository')
    console.log(chalk.yellow('‚ö†Ô∏è  You can initialize git manually by running:'))
    console.log(chalk.cyan(`  cd ${path.basename(projectDir)} && git init`))
  }
}

function showSuccessMessage(projectName: string, templateName: string): void {
  console.log()
  console.log(chalk.green('üéâ Success! Created'), chalk.cyan(projectName), chalk.green('from'), chalk.cyan(templateName))
  console.log()
  console.log('Next steps:')
  console.log(chalk.cyan(`  cd ${projectName}`))
  console.log(chalk.cyan('  npm run dev'))
  console.log()
  console.log('Happy coding! üöÄ')
  console.log()
}

function showAISuccessMessage(projectName: string, description: string, templateName: string): void {
  console.log()
  console.log(chalk.green('üéâ AI Success! Created'), chalk.cyan(projectName))
  console.log(chalk.gray(`   Based on: "${description}"`))
  console.log(chalk.gray(`   Using: ${templateName} template`))
  console.log()
  console.log('ü§ñ AI-generated features:')
  console.log(chalk.green('   ‚úÖ Project structure optimized for your needs'))
  console.log(chalk.green('   ‚úÖ Dependencies selected automatically'))
  console.log(chalk.green('   ‚úÖ Configuration files generated'))
  console.log()
  console.log('Next steps:')
  console.log(chalk.cyan(`  cd ${projectName}`))
  console.log(chalk.cyan('  npm run dev'))
  console.log()
  console.log('Need help? Run:', chalk.cyan('nexa chat'), 'for AI assistance!')
  console.log()
}