"use strict";
/**
 * Create command - Generate new projects from templates
 * Phase 1: Template-based generation
 * Phase 2: AI-powered generation
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProject = createProject;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const ora_1 = __importDefault(require("ora"));
const inquirer_1 = __importDefault(require("inquirer"));
const cross_spawn_1 = require("cross-spawn");
const validate_npm_package_name_1 = __importDefault(require("validate-npm-package-name"));
const template_engine_1 = require("../utils/template-engine");
const logger_1 = require("../utils/logger");
const logger = new logger_1.Logger('create');
async function createProject(projectName, options) {
    try {
        logger.info('Starting project creation', { projectName, options });
        // Validate project name
        await validateProjectName(projectName);
        // Determine how to create the project
        if (options.description) {
            // Phase 2: AI-powered generation
            await createProjectFromDescription(projectName, options.description, options);
        }
        else {
            // Phase 1: Template-based generation
            await createProjectFromTemplate(projectName, options);
        }
    }
    catch (error) {
        logger.error('Failed to create project', { error });
        console.error(chalk_1.default.red('❌ Failed to create project:'), error instanceof Error ? error.message : String(error));
        process.exit(1);
    }
}
async function validateProjectName(projectName) {
    const validation = (0, validate_npm_package_name_1.default)(projectName);
    if (!validation.validForNewPackages) {
        const issues = [
            ...(validation.errors || []),
            ...(validation.warnings || [])
        ];
        throw new Error(`Invalid project name "${projectName}":\n${issues.join('\n')}`);
    }
    // Check if directory already exists
    const targetDir = path_1.default.resolve(process.cwd(), projectName);
    if (await fs_extra_1.default.pathExists(targetDir)) {
        const { overwrite } = await inquirer_1.default.prompt([
            {
                type: 'confirm',
                name: 'overwrite',
                message: `Directory "${projectName}" already exists. Overwrite?`,
                default: false
            }
        ]);
        if (!overwrite) {
            throw new Error('Project creation cancelled');
        }
        await fs_extra_1.default.remove(targetDir);
    }
}
async function createProjectFromTemplate(projectName, options) {
    const spinner = (0, ora_1.default)('Creating project from template...').start();
    try {
        // Get available templates
        const templateEngine = new template_engine_1.TemplateEngine();
        const availableTemplates = await templateEngine.getAvailableTemplates();
        let selectedTemplate = options.template;
        // If no template specified, prompt user to select
        if (!selectedTemplate) {
            spinner.stop();
            const { template } = await inquirer_1.default.prompt([
                {
                    type: 'list',
                    name: 'template',
                    message: 'Select a project template:',
                    choices: availableTemplates.map(t => ({
                        name: `${t.name} - ${t.description}`,
                        value: t.id
                    }))
                }
            ]);
            selectedTemplate = template;
            spinner.start('Creating project from template...');
        }
        // Validate template exists
        const template = availableTemplates.find(t => t.id === selectedTemplate);
        if (!template) {
            throw new Error(`Template "${selectedTemplate}" not found`);
        }
        spinner.text = `Creating project from ${template.name} template...`;
        // Generate project from template
        const targetDir = path_1.default.resolve(process.cwd(), projectName);
        await templateEngine.generateProject(template.id, targetDir, {
            projectName,
            description: `A ${template.name} project created with NexaBuilder`,
            author: 'Generated by NexaBuilder CLI'
        });
        spinner.succeed(chalk_1.default.green('✅ Project created successfully!'));
        // Install dependencies
        if (options.install !== false) {
            await installDependencies(targetDir);
        }
        // Initialize git repository
        if (options.git !== false) {
            await initializeGit(targetDir);
        }
        // Show success message and next steps
        showSuccessMessage(projectName, template.name);
    }
    catch (error) {
        spinner.fail(chalk_1.default.red('❌ Failed to create project from template'));
        throw error;
    }
}
async function createProjectFromDescription(projectName, description, options) {
    const spinner = (0, ora_1.default)('Analyzing your project description with AI...').start();
    try {
        // Phase 2: This will use AI to analyze the description and generate the project
        // For now, we'll show a placeholder implementation
        spinner.text = '🤖 AI is analyzing your requirements...';
        await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate AI processing
        spinner.text = '🔨 Generating project structure...';
        await new Promise(resolve => setTimeout(resolve, 1500));
        spinner.text = '📦 Creating components and APIs...';
        await new Promise(resolve => setTimeout(resolve, 2000));
        // For Phase 1, fall back to a smart template selection
        // Phase 2 will replace this with actual AI generation
        spinner.text = '🎯 Selecting optimal template based on your description...';
        const templateEngine = new template_engine_1.TemplateEngine();
        const smartTemplate = await templateEngine.selectTemplateForDescription(description);
        const targetDir = path_1.default.resolve(process.cwd(), projectName);
        await templateEngine.generateProject(smartTemplate.id, targetDir, {
            projectName,
            description,
            author: 'Generated by NexaBuilder AI'
        });
        spinner.succeed(chalk_1.default.green('🎉 AI-generated project created successfully!'));
        // Install dependencies
        if (options.install !== false) {
            await installDependencies(targetDir);
        }
        // Initialize git repository
        if (options.git !== false) {
            await initializeGit(targetDir);
        }
        // Show AI-specific success message
        showAISuccessMessage(projectName, description, smartTemplate.name);
    }
    catch (error) {
        spinner.fail(chalk_1.default.red('❌ AI project generation failed'));
        throw error;
    }
}
async function installDependencies(projectDir) {
    const spinner = (0, ora_1.default)('Installing dependencies...').start();
    try {
        // Check if package.json exists
        const packageJsonPath = path_1.default.join(projectDir, 'package.json');
        if (!await fs_extra_1.default.pathExists(packageJsonPath)) {
            spinner.info('No package.json found, skipping dependency installation');
            return;
        }
        // Use npm install
        const result = (0, cross_spawn_1.spawn)('npm', ['install'], {
            cwd: projectDir,
            stdio: 'pipe'
        });
        await new Promise((resolve, reject) => {
            result.on('close', (code) => {
                if (code === 0) {
                    spinner.succeed('📦 Dependencies installed');
                    resolve();
                }
                else {
                    reject(new Error(`npm install failed with code ${code}`));
                }
            });
            result.on('error', reject);
        });
    }
    catch (error) {
        spinner.fail('❌ Failed to install dependencies');
        console.log(chalk_1.default.yellow('⚠️  You can install dependencies manually by running:'));
        console.log(chalk_1.default.cyan(`  cd ${path_1.default.basename(projectDir)} && npm install`));
    }
}
async function initializeGit(projectDir) {
    const spinner = (0, ora_1.default)('Initializing git repository...').start();
    try {
        // Initialize git repo
        const initResult = (0, cross_spawn_1.spawn)('git', ['init'], { cwd: projectDir, stdio: 'pipe' });
        await new Promise((resolve, reject) => {
            initResult.on('close', (code) => {
                if (code === 0)
                    resolve();
                else
                    reject(new Error(`git init failed with code ${code}`));
            });
            initResult.on('error', reject);
        });
        // Add all files
        const addResult = (0, cross_spawn_1.spawn)('git', ['add', '.'], { cwd: projectDir, stdio: 'pipe' });
        await new Promise((resolve, reject) => {
            addResult.on('close', (code) => {
                if (code === 0)
                    resolve();
                else
                    reject(new Error(`git add failed with code ${code}`));
            });
            addResult.on('error', reject);
        });
        // Initial commit
        const commitResult = (0, cross_spawn_1.spawn)('git', ['commit', '-m', 'Initial commit from NexaBuilder CLI'], {
            cwd: projectDir,
            stdio: 'pipe'
        });
        await new Promise((resolve, reject) => {
            commitResult.on('close', (code) => {
                if (code === 0) {
                    spinner.succeed('📝 Git repository initialized');
                    resolve();
                }
                else {
                    reject(new Error(`git commit failed with code ${code}`));
                }
            });
            commitResult.on('error', reject);
        });
    }
    catch (error) {
        spinner.fail('❌ Failed to initialize git repository');
        console.log(chalk_1.default.yellow('⚠️  You can initialize git manually by running:'));
        console.log(chalk_1.default.cyan(`  cd ${path_1.default.basename(projectDir)} && git init`));
    }
}
function showSuccessMessage(projectName, templateName) {
    console.log();
    console.log(chalk_1.default.green('🎉 Success! Created'), chalk_1.default.cyan(projectName), chalk_1.default.green('from'), chalk_1.default.cyan(templateName));
    console.log();
    console.log('Next steps:');
    console.log(chalk_1.default.cyan(`  cd ${projectName}`));
    console.log(chalk_1.default.cyan('  npm run dev'));
    console.log();
    console.log('Happy coding! 🚀');
    console.log();
}
function showAISuccessMessage(projectName, description, templateName) {
    console.log();
    console.log(chalk_1.default.green('🎉 AI Success! Created'), chalk_1.default.cyan(projectName));
    console.log(chalk_1.default.gray(`   Based on: "${description}"`));
    console.log(chalk_1.default.gray(`   Using: ${templateName} template`));
    console.log();
    console.log('🤖 AI-generated features:');
    console.log(chalk_1.default.green('   ✅ Project structure optimized for your needs'));
    console.log(chalk_1.default.green('   ✅ Dependencies selected automatically'));
    console.log(chalk_1.default.green('   ✅ Configuration files generated'));
    console.log();
    console.log('Next steps:');
    console.log(chalk_1.default.cyan(`  cd ${projectName}`));
    console.log(chalk_1.default.cyan('  npm run dev'));
    console.log();
    console.log('Need help? Run:', chalk_1.default.cyan('nexa chat'), 'for AI assistance!');
    console.log();
}
//# sourceMappingURL=create.js.map